# 设定Log4j2内部的日志级别，有效值：trace, debug, info, warn, error, fatal。只对Log4j本身的事件有效,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
status = fatal

# 配置的名称
name =PropertiesConfig


appenders = console,I


#控制台类型的日志输出源
appender.console.type = Console
#输出源的名称
appender.console.name = consoleLog
#输出布局类型
appender.console.layout.type = PatternLayout
#输出模板
appender.console.layout.pattern = %m%n
appender.console.target = System_out  



# 文件滚动记录类型的日志输出源
appender.I.type = RollingFile
# 当前滚动输出源的名称，以便在Logger的配置项中能够调用
appender.I.name = InfoRollingFile
# 当前正在操作的日志文件的文件名
appender.I.fileName = ${web:rootDir}/WEB-INF/log/info.log
# 归档后的日志文件的文件名格式，其中`%d{yyyy-MM-dd-HH}`用来自动填充日期   %i的数字越大，文件越新
appender.I.filePattern = ${web:rootDir}/WEB-INF/log/info_%d{yyyy-MM-dd}_%i.log
# 滚动记录输出源布局类型
appender.I.layout.type = PatternLayout
# 滚动记录输出模板
appender.I.layout.pattern = %-d{yyyy-MM-dd HH:mm:ss} [ %p ] [ %c ] %m%n
# 指定记录文件的封存策略，该策略主要是完成周期性的日志文件封存工作
appender.I.policies.type = Policies
# 基于时间进行日志的切割
appender.I.policies.time.type = TimeBasedTriggeringPolicy
# 切割的间隔为1月, 即每天进行一次日志的归档，如果filePattern中配置的文件重命名规则是${web:rootDir}/WEB-INF/log/info_%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，TimeBasedTriggeringPolicy指定的size是1，结合起来就是每2分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每2个小时生成一个文件。
appender.I.policies.time.interval = 1
# 修正时间范围, 从0时开始计数。若modulate=true，则封存时间将以0点为边界进行偏移计算。比如，modulate=true，interval=4hours，那么假设上次封存日志的时间为03:00，则下次封存日志的时间为04:00，之后的封存时间
appender.I.policies.time.modulate = true
# 基于日志文件体积的触发策略
appender.I.policies.size.type = SizeBasedTriggeringPolicy
# 当日志文件体积大于size指定的值时，触发Rolling
appender.I.policies.size.size=50M
# 文件封存的覆盖策略（RolloverStrategy）
appender.I.strategy.type = DefaultRolloverStrategy
# 生成分割（封存）文件的个数
appender.I.strategy.max = 100


#启动时打印第三方日志(需引入log4j-jcl.jar 不然启动Tomcat时控制显示一大堆信息)
logger.spring.name = org.springframework
# 设置打印级别（日志级别）
logger.spring.level = warn
# 是否向上级logger传递打印信息
logger.spring.additivity = false
# 关联名称为consoleLog的输出源（appender）
logger.spring.appenderRef.consolelog.ref = consoleLog



# 根日志，所有日志的父节点 级别顺序（低到高）：all < trace <debug < info < warn < error < fatal <off
rootLogger.level = info
#rootLogger.appenderRefs =I
rootLogger.appenderRef.I.ref = InfoRollingFile
rootLogger.appenderRef.I.level = warn

# 关联名称为consoleLog的输出源  注意consolelog小写
rootLogger.appenderRef.consolelog.ref = consoleLog
# 生产环境设为off关闭控制台日志输出
rootLogger.appenderRef.consolelog.level = all
